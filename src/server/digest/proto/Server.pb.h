// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Server_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Server_2eproto;
namespace org {
namespace kapa {
namespace tarracsh {
namespace server {
namespace digest {
class DigestRequest;
struct DigestRequestDefaultTypeInternal;
extern DigestRequestDefaultTypeInternal _DigestRequest_default_instance_;
class DigestResponse;
struct DigestResponseDefaultTypeInternal;
extern DigestResponseDefaultTypeInternal _DigestResponse_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Feature;
struct FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class FileDigestResult;
struct FileDigestResultDefaultTypeInternal;
extern FileDigestResultDefaultTypeInternal _FileDigestResult_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rectangle;
struct RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class RouteNote;
struct RouteNoteDefaultTypeInternal;
extern RouteNoteDefaultTypeInternal _RouteNote_default_instance_;
class RouteSummary;
struct RouteSummaryDefaultTypeInternal;
extern RouteSummaryDefaultTypeInternal _RouteSummary_default_instance_;
}  // namespace digest
}  // namespace server
}  // namespace tarracsh
}  // namespace kapa
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::kapa::tarracsh::server::digest::DigestRequest* Arena::CreateMaybeMessage<::org::kapa::tarracsh::server::digest::DigestRequest>(Arena*);
template<> ::org::kapa::tarracsh::server::digest::DigestResponse* Arena::CreateMaybeMessage<::org::kapa::tarracsh::server::digest::DigestResponse>(Arena*);
template<> ::org::kapa::tarracsh::server::digest::Empty* Arena::CreateMaybeMessage<::org::kapa::tarracsh::server::digest::Empty>(Arena*);
template<> ::org::kapa::tarracsh::server::digest::Feature* Arena::CreateMaybeMessage<::org::kapa::tarracsh::server::digest::Feature>(Arena*);
template<> ::org::kapa::tarracsh::server::digest::FileDigestResult* Arena::CreateMaybeMessage<::org::kapa::tarracsh::server::digest::FileDigestResult>(Arena*);
template<> ::org::kapa::tarracsh::server::digest::Point* Arena::CreateMaybeMessage<::org::kapa::tarracsh::server::digest::Point>(Arena*);
template<> ::org::kapa::tarracsh::server::digest::Rectangle* Arena::CreateMaybeMessage<::org::kapa::tarracsh::server::digest::Rectangle>(Arena*);
template<> ::org::kapa::tarracsh::server::digest::RouteNote* Arena::CreateMaybeMessage<::org::kapa::tarracsh::server::digest::RouteNote>(Arena*);
template<> ::org::kapa::tarracsh::server::digest::RouteSummary* Arena::CreateMaybeMessage<::org::kapa::tarracsh::server::digest::RouteSummary>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace kapa {
namespace tarracsh {
namespace server {
namespace digest {

// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:org.kapa.tarracsh.server.digest.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.kapa.tarracsh.server.digest.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:org.kapa.tarracsh.server.digest.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class DigestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.kapa.tarracsh.server.digest.DigestRequest) */ {
 public:
  inline DigestRequest() : DigestRequest(nullptr) {}
  ~DigestRequest() override;
  explicit PROTOBUF_CONSTEXPR DigestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigestRequest(const DigestRequest& from);
  DigestRequest(DigestRequest&& from) noexcept
    : DigestRequest() {
    *this = ::std::move(from);
  }

  inline DigestRequest& operator=(const DigestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigestRequest& operator=(DigestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigestRequest* internal_default_instance() {
    return reinterpret_cast<const DigestRequest*>(
               &_DigestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DigestRequest& a, DigestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DigestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DigestRequest& from) {
    DigestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.kapa.tarracsh.server.digest.DigestRequest";
  }
  protected:
  explicit DigestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kDryRunFieldNumber = 2,
  };
  // string input = 1;
  void clear_input();
  const std::string& input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // bool dryRun = 2;
  void clear_dryrun();
  bool dryrun() const;
  void set_dryrun(bool value);
  private:
  bool _internal_dryrun() const;
  void _internal_set_dryrun(bool value);
  public:

  // @@protoc_insertion_point(class_scope:org.kapa.tarracsh.server.digest.DigestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
    bool dryrun_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class FileDigestResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.kapa.tarracsh.server.digest.FileDigestResult) */ {
 public:
  inline FileDigestResult() : FileDigestResult(nullptr) {}
  ~FileDigestResult() override;
  explicit PROTOBUF_CONSTEXPR FileDigestResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDigestResult(const FileDigestResult& from);
  FileDigestResult(FileDigestResult&& from) noexcept
    : FileDigestResult() {
    *this = ::std::move(from);
  }

  inline FileDigestResult& operator=(const FileDigestResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDigestResult& operator=(FileDigestResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDigestResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDigestResult* internal_default_instance() {
    return reinterpret_cast<const FileDigestResult*>(
               &_FileDigestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileDigestResult& a, FileDigestResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDigestResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDigestResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDigestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDigestResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDigestResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileDigestResult& from) {
    FileDigestResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDigestResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.kapa.tarracsh.server.digest.FileDigestResult";
  }
  protected:
  explicit FileDigestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kIsNewFieldNumber = 2,
    kIsChangedFieldNumber = 3,
    kIsSameDigestFieldNumber = 4,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bool isNew = 2;
  void clear_isnew();
  bool isnew() const;
  void set_isnew(bool value);
  private:
  bool _internal_isnew() const;
  void _internal_set_isnew(bool value);
  public:

  // bool isChanged = 3;
  void clear_ischanged();
  bool ischanged() const;
  void set_ischanged(bool value);
  private:
  bool _internal_ischanged() const;
  void _internal_set_ischanged(bool value);
  public:

  // bool isSameDigest = 4;
  void clear_issamedigest();
  bool issamedigest() const;
  void set_issamedigest(bool value);
  private:
  bool _internal_issamedigest() const;
  void _internal_set_issamedigest(bool value);
  public:

  // @@protoc_insertion_point(class_scope:org.kapa.tarracsh.server.digest.FileDigestResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    bool isnew_;
    bool ischanged_;
    bool issamedigest_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class DigestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.kapa.tarracsh.server.digest.DigestResponse) */ {
 public:
  inline DigestResponse() : DigestResponse(nullptr) {}
  ~DigestResponse() override;
  explicit PROTOBUF_CONSTEXPR DigestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigestResponse(const DigestResponse& from);
  DigestResponse(DigestResponse&& from) noexcept
    : DigestResponse() {
    *this = ::std::move(from);
  }

  inline DigestResponse& operator=(const DigestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigestResponse& operator=(DigestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigestResponse* internal_default_instance() {
    return reinterpret_cast<const DigestResponse*>(
               &_DigestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DigestResponse& a, DigestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DigestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DigestResponse& from) {
    DigestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.kapa.tarracsh.server.digest.DigestResponse";
  }
  protected:
  explicit DigestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJarsFieldNumber = 1,
    kClassfilesFieldNumber = 2,
  };
  // repeated .org.kapa.tarracsh.server.digest.FileDigestResult jars = 1;
  int jars_size() const;
  private:
  int _internal_jars_size() const;
  public:
  void clear_jars();
  ::org::kapa::tarracsh::server::digest::FileDigestResult* mutable_jars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::kapa::tarracsh::server::digest::FileDigestResult >*
      mutable_jars();
  private:
  const ::org::kapa::tarracsh::server::digest::FileDigestResult& _internal_jars(int index) const;
  ::org::kapa::tarracsh::server::digest::FileDigestResult* _internal_add_jars();
  public:
  const ::org::kapa::tarracsh::server::digest::FileDigestResult& jars(int index) const;
  ::org::kapa::tarracsh::server::digest::FileDigestResult* add_jars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::kapa::tarracsh::server::digest::FileDigestResult >&
      jars() const;

  // repeated .org.kapa.tarracsh.server.digest.FileDigestResult classfiles = 2;
  int classfiles_size() const;
  private:
  int _internal_classfiles_size() const;
  public:
  void clear_classfiles();
  ::org::kapa::tarracsh::server::digest::FileDigestResult* mutable_classfiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::kapa::tarracsh::server::digest::FileDigestResult >*
      mutable_classfiles();
  private:
  const ::org::kapa::tarracsh::server::digest::FileDigestResult& _internal_classfiles(int index) const;
  ::org::kapa::tarracsh::server::digest::FileDigestResult* _internal_add_classfiles();
  public:
  const ::org::kapa::tarracsh::server::digest::FileDigestResult& classfiles(int index) const;
  ::org::kapa::tarracsh::server::digest::FileDigestResult* add_classfiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::kapa::tarracsh::server::digest::FileDigestResult >&
      classfiles() const;

  // @@protoc_insertion_point(class_scope:org.kapa.tarracsh.server.digest.DigestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::kapa::tarracsh::server::digest::FileDigestResult > jars_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::kapa::tarracsh::server::digest::FileDigestResult > classfiles_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.kapa.tarracsh.server.digest.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.kapa.tarracsh.server.digest.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // int32 latitude = 1;
  void clear_latitude();
  int32_t latitude() const;
  void set_latitude(int32_t value);
  private:
  int32_t _internal_latitude() const;
  void _internal_set_latitude(int32_t value);
  public:

  // int32 longitude = 2;
  void clear_longitude();
  int32_t longitude() const;
  void set_longitude(int32_t value);
  private:
  int32_t _internal_longitude() const;
  void _internal_set_longitude(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:org.kapa.tarracsh.server.digest.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t latitude_;
    int32_t longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class Rectangle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.kapa.tarracsh.server.digest.Rectangle) */ {
 public:
  inline Rectangle() : Rectangle(nullptr) {}
  ~Rectangle() override;
  explicit PROTOBUF_CONSTEXPR Rectangle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rectangle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rectangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rectangle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rectangle& from) {
    Rectangle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.kapa.tarracsh.server.digest.Rectangle";
  }
  protected:
  explicit Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoFieldNumber = 1,
    kHiFieldNumber = 2,
  };
  // .org.kapa.tarracsh.server.digest.Point lo = 1;
  bool has_lo() const;
  private:
  bool _internal_has_lo() const;
  public:
  void clear_lo();
  const ::org::kapa::tarracsh::server::digest::Point& lo() const;
  PROTOBUF_NODISCARD ::org::kapa::tarracsh::server::digest::Point* release_lo();
  ::org::kapa::tarracsh::server::digest::Point* mutable_lo();
  void set_allocated_lo(::org::kapa::tarracsh::server::digest::Point* lo);
  private:
  const ::org::kapa::tarracsh::server::digest::Point& _internal_lo() const;
  ::org::kapa::tarracsh::server::digest::Point* _internal_mutable_lo();
  public:
  void unsafe_arena_set_allocated_lo(
      ::org::kapa::tarracsh::server::digest::Point* lo);
  ::org::kapa::tarracsh::server::digest::Point* unsafe_arena_release_lo();

  // .org.kapa.tarracsh.server.digest.Point hi = 2;
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  const ::org::kapa::tarracsh::server::digest::Point& hi() const;
  PROTOBUF_NODISCARD ::org::kapa::tarracsh::server::digest::Point* release_hi();
  ::org::kapa::tarracsh::server::digest::Point* mutable_hi();
  void set_allocated_hi(::org::kapa::tarracsh::server::digest::Point* hi);
  private:
  const ::org::kapa::tarracsh::server::digest::Point& _internal_hi() const;
  ::org::kapa::tarracsh::server::digest::Point* _internal_mutable_hi();
  public:
  void unsafe_arena_set_allocated_hi(
      ::org::kapa::tarracsh::server::digest::Point* hi);
  ::org::kapa::tarracsh::server::digest::Point* unsafe_arena_release_hi();

  // @@protoc_insertion_point(class_scope:org.kapa.tarracsh.server.digest.Rectangle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::org::kapa::tarracsh::server::digest::Point* lo_;
    ::org::kapa::tarracsh::server::digest::Point* hi_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class Feature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.kapa.tarracsh.server.digest.Feature) */ {
 public:
  inline Feature() : Feature(nullptr) {}
  ~Feature() override;
  explicit PROTOBUF_CONSTEXPR Feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Feature(const Feature& from);
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Feature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Feature& from) {
    Feature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.kapa.tarracsh.server.digest.Feature";
  }
  protected:
  explicit Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .org.kapa.tarracsh.server.digest.Point location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::org::kapa::tarracsh::server::digest::Point& location() const;
  PROTOBUF_NODISCARD ::org::kapa::tarracsh::server::digest::Point* release_location();
  ::org::kapa::tarracsh::server::digest::Point* mutable_location();
  void set_allocated_location(::org::kapa::tarracsh::server::digest::Point* location);
  private:
  const ::org::kapa::tarracsh::server::digest::Point& _internal_location() const;
  ::org::kapa::tarracsh::server::digest::Point* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::org::kapa::tarracsh::server::digest::Point* location);
  ::org::kapa::tarracsh::server::digest::Point* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:org.kapa.tarracsh.server.digest.Feature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::org::kapa::tarracsh::server::digest::Point* location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class RouteNote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.kapa.tarracsh.server.digest.RouteNote) */ {
 public:
  inline RouteNote() : RouteNote(nullptr) {}
  ~RouteNote() override;
  explicit PROTOBUF_CONSTEXPR RouteNote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteNote(const RouteNote& from);
  RouteNote(RouteNote&& from) noexcept
    : RouteNote() {
    *this = ::std::move(from);
  }

  inline RouteNote& operator=(const RouteNote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteNote& operator=(RouteNote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteNote& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteNote* internal_default_instance() {
    return reinterpret_cast<const RouteNote*>(
               &_RouteNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RouteNote& a, RouteNote& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteNote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteNote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteNote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteNote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteNote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteNote& from) {
    RouteNote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteNote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.kapa.tarracsh.server.digest.RouteNote";
  }
  protected:
  explicit RouteNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kLocationFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .org.kapa.tarracsh.server.digest.Point location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::org::kapa::tarracsh::server::digest::Point& location() const;
  PROTOBUF_NODISCARD ::org::kapa::tarracsh::server::digest::Point* release_location();
  ::org::kapa::tarracsh::server::digest::Point* mutable_location();
  void set_allocated_location(::org::kapa::tarracsh::server::digest::Point* location);
  private:
  const ::org::kapa::tarracsh::server::digest::Point& _internal_location() const;
  ::org::kapa::tarracsh::server::digest::Point* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::org::kapa::tarracsh::server::digest::Point* location);
  ::org::kapa::tarracsh::server::digest::Point* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:org.kapa.tarracsh.server.digest.RouteNote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::org::kapa::tarracsh::server::digest::Point* location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class RouteSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.kapa.tarracsh.server.digest.RouteSummary) */ {
 public:
  inline RouteSummary() : RouteSummary(nullptr) {}
  ~RouteSummary() override;
  explicit PROTOBUF_CONSTEXPR RouteSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteSummary(const RouteSummary& from);
  RouteSummary(RouteSummary&& from) noexcept
    : RouteSummary() {
    *this = ::std::move(from);
  }

  inline RouteSummary& operator=(const RouteSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSummary& operator=(RouteSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteSummary* internal_default_instance() {
    return reinterpret_cast<const RouteSummary*>(
               &_RouteSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RouteSummary& a, RouteSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteSummary& from) {
    RouteSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.kapa.tarracsh.server.digest.RouteSummary";
  }
  protected:
  explicit RouteSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCountFieldNumber = 1,
    kFeatureCountFieldNumber = 2,
    kDistanceFieldNumber = 3,
    kElapsedTimeFieldNumber = 4,
  };
  // int32 point_count = 1;
  void clear_point_count();
  int32_t point_count() const;
  void set_point_count(int32_t value);
  private:
  int32_t _internal_point_count() const;
  void _internal_set_point_count(int32_t value);
  public:

  // int32 feature_count = 2;
  void clear_feature_count();
  int32_t feature_count() const;
  void set_feature_count(int32_t value);
  private:
  int32_t _internal_feature_count() const;
  void _internal_set_feature_count(int32_t value);
  public:

  // int32 distance = 3;
  void clear_distance();
  int32_t distance() const;
  void set_distance(int32_t value);
  private:
  int32_t _internal_distance() const;
  void _internal_set_distance(int32_t value);
  public:

  // int32 elapsed_time = 4;
  void clear_elapsed_time();
  int32_t elapsed_time() const;
  void set_elapsed_time(int32_t value);
  private:
  int32_t _internal_elapsed_time() const;
  void _internal_set_elapsed_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:org.kapa.tarracsh.server.digest.RouteSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t point_count_;
    int32_t feature_count_;
    int32_t distance_;
    int32_t elapsed_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// DigestRequest

// string input = 1;
inline void DigestRequest::clear_input() {
  _impl_.input_.ClearToEmpty();
}
inline const std::string& DigestRequest::input() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.DigestRequest.input)
  return _internal_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DigestRequest::set_input(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.DigestRequest.input)
}
inline std::string* DigestRequest::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:org.kapa.tarracsh.server.digest.DigestRequest.input)
  return _s;
}
inline const std::string& DigestRequest::_internal_input() const {
  return _impl_.input_.Get();
}
inline void DigestRequest::_internal_set_input(const std::string& value) {
  
  _impl_.input_.Set(value, GetArenaForAllocation());
}
inline std::string* DigestRequest::_internal_mutable_input() {
  
  return _impl_.input_.Mutable(GetArenaForAllocation());
}
inline std::string* DigestRequest::release_input() {
  // @@protoc_insertion_point(field_release:org.kapa.tarracsh.server.digest.DigestRequest.input)
  return _impl_.input_.Release();
}
inline void DigestRequest::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  _impl_.input_.SetAllocated(input, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_.IsDefault()) {
    _impl_.input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.kapa.tarracsh.server.digest.DigestRequest.input)
}

// bool dryRun = 2;
inline void DigestRequest::clear_dryrun() {
  _impl_.dryrun_ = false;
}
inline bool DigestRequest::_internal_dryrun() const {
  return _impl_.dryrun_;
}
inline bool DigestRequest::dryrun() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.DigestRequest.dryRun)
  return _internal_dryrun();
}
inline void DigestRequest::_internal_set_dryrun(bool value) {
  
  _impl_.dryrun_ = value;
}
inline void DigestRequest::set_dryrun(bool value) {
  _internal_set_dryrun(value);
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.DigestRequest.dryRun)
}

// -------------------------------------------------------------------

// FileDigestResult

// string filename = 1;
inline void FileDigestResult::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileDigestResult::filename() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.FileDigestResult.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDigestResult::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.FileDigestResult.filename)
}
inline std::string* FileDigestResult::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:org.kapa.tarracsh.server.digest.FileDigestResult.filename)
  return _s;
}
inline const std::string& FileDigestResult::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void FileDigestResult::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDigestResult::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* FileDigestResult::release_filename() {
  // @@protoc_insertion_point(field_release:org.kapa.tarracsh.server.digest.FileDigestResult.filename)
  return _impl_.filename_.Release();
}
inline void FileDigestResult::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.kapa.tarracsh.server.digest.FileDigestResult.filename)
}

// bool isNew = 2;
inline void FileDigestResult::clear_isnew() {
  _impl_.isnew_ = false;
}
inline bool FileDigestResult::_internal_isnew() const {
  return _impl_.isnew_;
}
inline bool FileDigestResult::isnew() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.FileDigestResult.isNew)
  return _internal_isnew();
}
inline void FileDigestResult::_internal_set_isnew(bool value) {
  
  _impl_.isnew_ = value;
}
inline void FileDigestResult::set_isnew(bool value) {
  _internal_set_isnew(value);
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.FileDigestResult.isNew)
}

// bool isChanged = 3;
inline void FileDigestResult::clear_ischanged() {
  _impl_.ischanged_ = false;
}
inline bool FileDigestResult::_internal_ischanged() const {
  return _impl_.ischanged_;
}
inline bool FileDigestResult::ischanged() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.FileDigestResult.isChanged)
  return _internal_ischanged();
}
inline void FileDigestResult::_internal_set_ischanged(bool value) {
  
  _impl_.ischanged_ = value;
}
inline void FileDigestResult::set_ischanged(bool value) {
  _internal_set_ischanged(value);
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.FileDigestResult.isChanged)
}

// bool isSameDigest = 4;
inline void FileDigestResult::clear_issamedigest() {
  _impl_.issamedigest_ = false;
}
inline bool FileDigestResult::_internal_issamedigest() const {
  return _impl_.issamedigest_;
}
inline bool FileDigestResult::issamedigest() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.FileDigestResult.isSameDigest)
  return _internal_issamedigest();
}
inline void FileDigestResult::_internal_set_issamedigest(bool value) {
  
  _impl_.issamedigest_ = value;
}
inline void FileDigestResult::set_issamedigest(bool value) {
  _internal_set_issamedigest(value);
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.FileDigestResult.isSameDigest)
}

// -------------------------------------------------------------------

// DigestResponse

// repeated .org.kapa.tarracsh.server.digest.FileDigestResult jars = 1;
inline int DigestResponse::_internal_jars_size() const {
  return _impl_.jars_.size();
}
inline int DigestResponse::jars_size() const {
  return _internal_jars_size();
}
inline void DigestResponse::clear_jars() {
  _impl_.jars_.Clear();
}
inline ::org::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::mutable_jars(int index) {
  // @@protoc_insertion_point(field_mutable:org.kapa.tarracsh.server.digest.DigestResponse.jars)
  return _impl_.jars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::kapa::tarracsh::server::digest::FileDigestResult >*
DigestResponse::mutable_jars() {
  // @@protoc_insertion_point(field_mutable_list:org.kapa.tarracsh.server.digest.DigestResponse.jars)
  return &_impl_.jars_;
}
inline const ::org::kapa::tarracsh::server::digest::FileDigestResult& DigestResponse::_internal_jars(int index) const {
  return _impl_.jars_.Get(index);
}
inline const ::org::kapa::tarracsh::server::digest::FileDigestResult& DigestResponse::jars(int index) const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.DigestResponse.jars)
  return _internal_jars(index);
}
inline ::org::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::_internal_add_jars() {
  return _impl_.jars_.Add();
}
inline ::org::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::add_jars() {
  ::org::kapa::tarracsh::server::digest::FileDigestResult* _add = _internal_add_jars();
  // @@protoc_insertion_point(field_add:org.kapa.tarracsh.server.digest.DigestResponse.jars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::kapa::tarracsh::server::digest::FileDigestResult >&
DigestResponse::jars() const {
  // @@protoc_insertion_point(field_list:org.kapa.tarracsh.server.digest.DigestResponse.jars)
  return _impl_.jars_;
}

// repeated .org.kapa.tarracsh.server.digest.FileDigestResult classfiles = 2;
inline int DigestResponse::_internal_classfiles_size() const {
  return _impl_.classfiles_.size();
}
inline int DigestResponse::classfiles_size() const {
  return _internal_classfiles_size();
}
inline void DigestResponse::clear_classfiles() {
  _impl_.classfiles_.Clear();
}
inline ::org::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::mutable_classfiles(int index) {
  // @@protoc_insertion_point(field_mutable:org.kapa.tarracsh.server.digest.DigestResponse.classfiles)
  return _impl_.classfiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::kapa::tarracsh::server::digest::FileDigestResult >*
DigestResponse::mutable_classfiles() {
  // @@protoc_insertion_point(field_mutable_list:org.kapa.tarracsh.server.digest.DigestResponse.classfiles)
  return &_impl_.classfiles_;
}
inline const ::org::kapa::tarracsh::server::digest::FileDigestResult& DigestResponse::_internal_classfiles(int index) const {
  return _impl_.classfiles_.Get(index);
}
inline const ::org::kapa::tarracsh::server::digest::FileDigestResult& DigestResponse::classfiles(int index) const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.DigestResponse.classfiles)
  return _internal_classfiles(index);
}
inline ::org::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::_internal_add_classfiles() {
  return _impl_.classfiles_.Add();
}
inline ::org::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::add_classfiles() {
  ::org::kapa::tarracsh::server::digest::FileDigestResult* _add = _internal_add_classfiles();
  // @@protoc_insertion_point(field_add:org.kapa.tarracsh.server.digest.DigestResponse.classfiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::kapa::tarracsh::server::digest::FileDigestResult >&
DigestResponse::classfiles() const {
  // @@protoc_insertion_point(field_list:org.kapa.tarracsh.server.digest.DigestResponse.classfiles)
  return _impl_.classfiles_;
}

// -------------------------------------------------------------------

// Point

// int32 latitude = 1;
inline void Point::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline int32_t Point::_internal_latitude() const {
  return _impl_.latitude_;
}
inline int32_t Point::latitude() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.Point.latitude)
  return _internal_latitude();
}
inline void Point::_internal_set_latitude(int32_t value) {
  
  _impl_.latitude_ = value;
}
inline void Point::set_latitude(int32_t value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.Point.latitude)
}

// int32 longitude = 2;
inline void Point::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline int32_t Point::_internal_longitude() const {
  return _impl_.longitude_;
}
inline int32_t Point::longitude() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.Point.longitude)
  return _internal_longitude();
}
inline void Point::_internal_set_longitude(int32_t value) {
  
  _impl_.longitude_ = value;
}
inline void Point::set_longitude(int32_t value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.Point.longitude)
}

// -------------------------------------------------------------------

// Rectangle

// .org.kapa.tarracsh.server.digest.Point lo = 1;
inline bool Rectangle::_internal_has_lo() const {
  return this != internal_default_instance() && _impl_.lo_ != nullptr;
}
inline bool Rectangle::has_lo() const {
  return _internal_has_lo();
}
inline void Rectangle::clear_lo() {
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
}
inline const ::org::kapa::tarracsh::server::digest::Point& Rectangle::_internal_lo() const {
  const ::org::kapa::tarracsh::server::digest::Point* p = _impl_.lo_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::kapa::tarracsh::server::digest::Point&>(
      ::org::kapa::tarracsh::server::digest::_Point_default_instance_);
}
inline const ::org::kapa::tarracsh::server::digest::Point& Rectangle::lo() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.Rectangle.lo)
  return _internal_lo();
}
inline void Rectangle::unsafe_arena_set_allocated_lo(
    ::org::kapa::tarracsh::server::digest::Point* lo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lo_);
  }
  _impl_.lo_ = lo;
  if (lo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.kapa.tarracsh.server.digest.Rectangle.lo)
}
inline ::org::kapa::tarracsh::server::digest::Point* Rectangle::release_lo() {
  
  ::org::kapa::tarracsh::server::digest::Point* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::kapa::tarracsh::server::digest::Point* Rectangle::unsafe_arena_release_lo() {
  // @@protoc_insertion_point(field_release:org.kapa.tarracsh.server.digest.Rectangle.lo)
  
  ::org::kapa::tarracsh::server::digest::Point* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
  return temp;
}
inline ::org::kapa::tarracsh::server::digest::Point* Rectangle::_internal_mutable_lo() {
  
  if (_impl_.lo_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::kapa::tarracsh::server::digest::Point>(GetArenaForAllocation());
    _impl_.lo_ = p;
  }
  return _impl_.lo_;
}
inline ::org::kapa::tarracsh::server::digest::Point* Rectangle::mutable_lo() {
  ::org::kapa::tarracsh::server::digest::Point* _msg = _internal_mutable_lo();
  // @@protoc_insertion_point(field_mutable:org.kapa.tarracsh.server.digest.Rectangle.lo)
  return _msg;
}
inline void Rectangle::set_allocated_lo(::org::kapa::tarracsh::server::digest::Point* lo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lo_;
  }
  if (lo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lo);
    if (message_arena != submessage_arena) {
      lo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lo_ = lo;
  // @@protoc_insertion_point(field_set_allocated:org.kapa.tarracsh.server.digest.Rectangle.lo)
}

// .org.kapa.tarracsh.server.digest.Point hi = 2;
inline bool Rectangle::_internal_has_hi() const {
  return this != internal_default_instance() && _impl_.hi_ != nullptr;
}
inline bool Rectangle::has_hi() const {
  return _internal_has_hi();
}
inline void Rectangle::clear_hi() {
  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
}
inline const ::org::kapa::tarracsh::server::digest::Point& Rectangle::_internal_hi() const {
  const ::org::kapa::tarracsh::server::digest::Point* p = _impl_.hi_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::kapa::tarracsh::server::digest::Point&>(
      ::org::kapa::tarracsh::server::digest::_Point_default_instance_);
}
inline const ::org::kapa::tarracsh::server::digest::Point& Rectangle::hi() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.Rectangle.hi)
  return _internal_hi();
}
inline void Rectangle::unsafe_arena_set_allocated_hi(
    ::org::kapa::tarracsh::server::digest::Point* hi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hi_);
  }
  _impl_.hi_ = hi;
  if (hi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.kapa.tarracsh.server.digest.Rectangle.hi)
}
inline ::org::kapa::tarracsh::server::digest::Point* Rectangle::release_hi() {
  
  ::org::kapa::tarracsh::server::digest::Point* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::kapa::tarracsh::server::digest::Point* Rectangle::unsafe_arena_release_hi() {
  // @@protoc_insertion_point(field_release:org.kapa.tarracsh.server.digest.Rectangle.hi)
  
  ::org::kapa::tarracsh::server::digest::Point* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
  return temp;
}
inline ::org::kapa::tarracsh::server::digest::Point* Rectangle::_internal_mutable_hi() {
  
  if (_impl_.hi_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::kapa::tarracsh::server::digest::Point>(GetArenaForAllocation());
    _impl_.hi_ = p;
  }
  return _impl_.hi_;
}
inline ::org::kapa::tarracsh::server::digest::Point* Rectangle::mutable_hi() {
  ::org::kapa::tarracsh::server::digest::Point* _msg = _internal_mutable_hi();
  // @@protoc_insertion_point(field_mutable:org.kapa.tarracsh.server.digest.Rectangle.hi)
  return _msg;
}
inline void Rectangle::set_allocated_hi(::org::kapa::tarracsh::server::digest::Point* hi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hi_;
  }
  if (hi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hi);
    if (message_arena != submessage_arena) {
      hi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hi_ = hi;
  // @@protoc_insertion_point(field_set_allocated:org.kapa.tarracsh.server.digest.Rectangle.hi)
}

// -------------------------------------------------------------------

// Feature

// string name = 1;
inline void Feature::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.Feature.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Feature::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.Feature.name)
}
inline std::string* Feature::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:org.kapa.tarracsh.server.digest.Feature.name)
  return _s;
}
inline const std::string& Feature::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Feature::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Feature::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:org.kapa.tarracsh.server.digest.Feature.name)
  return _impl_.name_.Release();
}
inline void Feature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.kapa.tarracsh.server.digest.Feature.name)
}

// .org.kapa.tarracsh.server.digest.Point location = 2;
inline bool Feature::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool Feature::has_location() const {
  return _internal_has_location();
}
inline void Feature::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::org::kapa::tarracsh::server::digest::Point& Feature::_internal_location() const {
  const ::org::kapa::tarracsh::server::digest::Point* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::kapa::tarracsh::server::digest::Point&>(
      ::org::kapa::tarracsh::server::digest::_Point_default_instance_);
}
inline const ::org::kapa::tarracsh::server::digest::Point& Feature::location() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.Feature.location)
  return _internal_location();
}
inline void Feature::unsafe_arena_set_allocated_location(
    ::org::kapa::tarracsh::server::digest::Point* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.kapa.tarracsh.server.digest.Feature.location)
}
inline ::org::kapa::tarracsh::server::digest::Point* Feature::release_location() {
  
  ::org::kapa::tarracsh::server::digest::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::kapa::tarracsh::server::digest::Point* Feature::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:org.kapa.tarracsh.server.digest.Feature.location)
  
  ::org::kapa::tarracsh::server::digest::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::org::kapa::tarracsh::server::digest::Point* Feature::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::kapa::tarracsh::server::digest::Point>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::org::kapa::tarracsh::server::digest::Point* Feature::mutable_location() {
  ::org::kapa::tarracsh::server::digest::Point* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:org.kapa.tarracsh.server.digest.Feature.location)
  return _msg;
}
inline void Feature::set_allocated_location(::org::kapa::tarracsh::server::digest::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:org.kapa.tarracsh.server.digest.Feature.location)
}

// -------------------------------------------------------------------

// RouteNote

// .org.kapa.tarracsh.server.digest.Point location = 1;
inline bool RouteNote::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool RouteNote::has_location() const {
  return _internal_has_location();
}
inline void RouteNote::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::org::kapa::tarracsh::server::digest::Point& RouteNote::_internal_location() const {
  const ::org::kapa::tarracsh::server::digest::Point* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::kapa::tarracsh::server::digest::Point&>(
      ::org::kapa::tarracsh::server::digest::_Point_default_instance_);
}
inline const ::org::kapa::tarracsh::server::digest::Point& RouteNote::location() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.RouteNote.location)
  return _internal_location();
}
inline void RouteNote::unsafe_arena_set_allocated_location(
    ::org::kapa::tarracsh::server::digest::Point* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.kapa.tarracsh.server.digest.RouteNote.location)
}
inline ::org::kapa::tarracsh::server::digest::Point* RouteNote::release_location() {
  
  ::org::kapa::tarracsh::server::digest::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::kapa::tarracsh::server::digest::Point* RouteNote::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:org.kapa.tarracsh.server.digest.RouteNote.location)
  
  ::org::kapa::tarracsh::server::digest::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::org::kapa::tarracsh::server::digest::Point* RouteNote::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::kapa::tarracsh::server::digest::Point>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::org::kapa::tarracsh::server::digest::Point* RouteNote::mutable_location() {
  ::org::kapa::tarracsh::server::digest::Point* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:org.kapa.tarracsh.server.digest.RouteNote.location)
  return _msg;
}
inline void RouteNote::set_allocated_location(::org::kapa::tarracsh::server::digest::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:org.kapa.tarracsh.server.digest.RouteNote.location)
}

// string message = 2;
inline void RouteNote::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RouteNote::message() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.RouteNote.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteNote::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.RouteNote.message)
}
inline std::string* RouteNote::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:org.kapa.tarracsh.server.digest.RouteNote.message)
  return _s;
}
inline const std::string& RouteNote::_internal_message() const {
  return _impl_.message_.Get();
}
inline void RouteNote::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteNote::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteNote::release_message() {
  // @@protoc_insertion_point(field_release:org.kapa.tarracsh.server.digest.RouteNote.message)
  return _impl_.message_.Release();
}
inline void RouteNote::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.kapa.tarracsh.server.digest.RouteNote.message)
}

// -------------------------------------------------------------------

// RouteSummary

// int32 point_count = 1;
inline void RouteSummary::clear_point_count() {
  _impl_.point_count_ = 0;
}
inline int32_t RouteSummary::_internal_point_count() const {
  return _impl_.point_count_;
}
inline int32_t RouteSummary::point_count() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.RouteSummary.point_count)
  return _internal_point_count();
}
inline void RouteSummary::_internal_set_point_count(int32_t value) {
  
  _impl_.point_count_ = value;
}
inline void RouteSummary::set_point_count(int32_t value) {
  _internal_set_point_count(value);
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.RouteSummary.point_count)
}

// int32 feature_count = 2;
inline void RouteSummary::clear_feature_count() {
  _impl_.feature_count_ = 0;
}
inline int32_t RouteSummary::_internal_feature_count() const {
  return _impl_.feature_count_;
}
inline int32_t RouteSummary::feature_count() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.RouteSummary.feature_count)
  return _internal_feature_count();
}
inline void RouteSummary::_internal_set_feature_count(int32_t value) {
  
  _impl_.feature_count_ = value;
}
inline void RouteSummary::set_feature_count(int32_t value) {
  _internal_set_feature_count(value);
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.RouteSummary.feature_count)
}

// int32 distance = 3;
inline void RouteSummary::clear_distance() {
  _impl_.distance_ = 0;
}
inline int32_t RouteSummary::_internal_distance() const {
  return _impl_.distance_;
}
inline int32_t RouteSummary::distance() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.RouteSummary.distance)
  return _internal_distance();
}
inline void RouteSummary::_internal_set_distance(int32_t value) {
  
  _impl_.distance_ = value;
}
inline void RouteSummary::set_distance(int32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.RouteSummary.distance)
}

// int32 elapsed_time = 4;
inline void RouteSummary::clear_elapsed_time() {
  _impl_.elapsed_time_ = 0;
}
inline int32_t RouteSummary::_internal_elapsed_time() const {
  return _impl_.elapsed_time_;
}
inline int32_t RouteSummary::elapsed_time() const {
  // @@protoc_insertion_point(field_get:org.kapa.tarracsh.server.digest.RouteSummary.elapsed_time)
  return _internal_elapsed_time();
}
inline void RouteSummary::_internal_set_elapsed_time(int32_t value) {
  
  _impl_.elapsed_time_ = value;
}
inline void RouteSummary::set_elapsed_time(int32_t value) {
  _internal_set_elapsed_time(value);
  // @@protoc_insertion_point(field_set:org.kapa.tarracsh.server.digest.RouteSummary.elapsed_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace digest
}  // namespace server
}  // namespace tarracsh
}  // namespace kapa
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Server_2eproto
