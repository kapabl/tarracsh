// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Server.proto

#include "Server.pb.h"
#include "Server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace org {
namespace kapa {
namespace tarracsh {
namespace server {
namespace digest {

static const char* PublicDigest_method_names[] = {
  "/org.kapa.tarracsh.server.digest.PublicDigest/GetFeature",
  "/org.kapa.tarracsh.server.digest.PublicDigest/ListFeatures",
  "/org.kapa.tarracsh.server.digest.PublicDigest/RecordRoute",
  "/org.kapa.tarracsh.server.digest.PublicDigest/RouteChat",
  "/org.kapa.tarracsh.server.digest.PublicDigest/Quit",
  "/org.kapa.tarracsh.server.digest.PublicDigest/Check",
};

std::unique_ptr< PublicDigest::Stub> PublicDigest::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PublicDigest::Stub> stub(new PublicDigest::Stub(channel, options));
  return stub;
}

PublicDigest::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetFeature_(PublicDigest_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFeatures_(PublicDigest_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RecordRoute_(PublicDigest_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_RouteChat_(PublicDigest_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Quit_(PublicDigest_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Check_(PublicDigest_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PublicDigest::Stub::GetFeature(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Point& request, ::org::kapa::tarracsh::server::digest::Feature* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::kapa::tarracsh::server::digest::Point, ::org::kapa::tarracsh::server::digest::Feature, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFeature_, context, request, response);
}

void PublicDigest::Stub::async::GetFeature(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Point* request, ::org::kapa::tarracsh::server::digest::Feature* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::kapa::tarracsh::server::digest::Point, ::org::kapa::tarracsh::server::digest::Feature, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFeature_, context, request, response, std::move(f));
}

void PublicDigest::Stub::async::GetFeature(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Point* request, ::org::kapa::tarracsh::server::digest::Feature* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFeature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::kapa::tarracsh::server::digest::Feature>* PublicDigest::Stub::PrepareAsyncGetFeatureRaw(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Point& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::kapa::tarracsh::server::digest::Feature, ::org::kapa::tarracsh::server::digest::Point, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFeature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::kapa::tarracsh::server::digest::Feature>* PublicDigest::Stub::AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Point& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFeatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::org::kapa::tarracsh::server::digest::Feature>* PublicDigest::Stub::ListFeaturesRaw(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Rectangle& request) {
  return ::grpc::internal::ClientReaderFactory< ::org::kapa::tarracsh::server::digest::Feature>::Create(channel_.get(), rpcmethod_ListFeatures_, context, request);
}

void PublicDigest::Stub::async::ListFeatures(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Rectangle* request, ::grpc::ClientReadReactor< ::org::kapa::tarracsh::server::digest::Feature>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::org::kapa::tarracsh::server::digest::Feature>::Create(stub_->channel_.get(), stub_->rpcmethod_ListFeatures_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::org::kapa::tarracsh::server::digest::Feature>* PublicDigest::Stub::AsyncListFeaturesRaw(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::org::kapa::tarracsh::server::digest::Feature>::Create(channel_.get(), cq, rpcmethod_ListFeatures_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::org::kapa::tarracsh::server::digest::Feature>* PublicDigest::Stub::PrepareAsyncListFeaturesRaw(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Rectangle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::org::kapa::tarracsh::server::digest::Feature>::Create(channel_.get(), cq, rpcmethod_ListFeatures_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::org::kapa::tarracsh::server::digest::Point>* PublicDigest::Stub::RecordRouteRaw(::grpc::ClientContext* context, ::org::kapa::tarracsh::server::digest::RouteSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::org::kapa::tarracsh::server::digest::Point>::Create(channel_.get(), rpcmethod_RecordRoute_, context, response);
}

void PublicDigest::Stub::async::RecordRoute(::grpc::ClientContext* context, ::org::kapa::tarracsh::server::digest::RouteSummary* response, ::grpc::ClientWriteReactor< ::org::kapa::tarracsh::server::digest::Point>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::org::kapa::tarracsh::server::digest::Point>::Create(stub_->channel_.get(), stub_->rpcmethod_RecordRoute_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::org::kapa::tarracsh::server::digest::Point>* PublicDigest::Stub::AsyncRecordRouteRaw(::grpc::ClientContext* context, ::org::kapa::tarracsh::server::digest::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::org::kapa::tarracsh::server::digest::Point>::Create(channel_.get(), cq, rpcmethod_RecordRoute_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::org::kapa::tarracsh::server::digest::Point>* PublicDigest::Stub::PrepareAsyncRecordRouteRaw(::grpc::ClientContext* context, ::org::kapa::tarracsh::server::digest::RouteSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::org::kapa::tarracsh::server::digest::Point>::Create(channel_.get(), cq, rpcmethod_RecordRoute_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::org::kapa::tarracsh::server::digest::RouteNote, ::org::kapa::tarracsh::server::digest::RouteNote>* PublicDigest::Stub::RouteChatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::org::kapa::tarracsh::server::digest::RouteNote, ::org::kapa::tarracsh::server::digest::RouteNote>::Create(channel_.get(), rpcmethod_RouteChat_, context);
}

void PublicDigest::Stub::async::RouteChat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::org::kapa::tarracsh::server::digest::RouteNote,::org::kapa::tarracsh::server::digest::RouteNote>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::org::kapa::tarracsh::server::digest::RouteNote,::org::kapa::tarracsh::server::digest::RouteNote>::Create(stub_->channel_.get(), stub_->rpcmethod_RouteChat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::org::kapa::tarracsh::server::digest::RouteNote, ::org::kapa::tarracsh::server::digest::RouteNote>* PublicDigest::Stub::AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::org::kapa::tarracsh::server::digest::RouteNote, ::org::kapa::tarracsh::server::digest::RouteNote>::Create(channel_.get(), cq, rpcmethod_RouteChat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::org::kapa::tarracsh::server::digest::RouteNote, ::org::kapa::tarracsh::server::digest::RouteNote>* PublicDigest::Stub::PrepareAsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::org::kapa::tarracsh::server::digest::RouteNote, ::org::kapa::tarracsh::server::digest::RouteNote>::Create(channel_.get(), cq, rpcmethod_RouteChat_, context, false, nullptr);
}

::grpc::Status PublicDigest::Stub::Quit(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Empty& request, ::org::kapa::tarracsh::server::digest::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::kapa::tarracsh::server::digest::Empty, ::org::kapa::tarracsh::server::digest::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Quit_, context, request, response);
}

void PublicDigest::Stub::async::Quit(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Empty* request, ::org::kapa::tarracsh::server::digest::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::kapa::tarracsh::server::digest::Empty, ::org::kapa::tarracsh::server::digest::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Quit_, context, request, response, std::move(f));
}

void PublicDigest::Stub::async::Quit(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Empty* request, ::org::kapa::tarracsh::server::digest::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Quit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::kapa::tarracsh::server::digest::Empty>* PublicDigest::Stub::PrepareAsyncQuitRaw(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::kapa::tarracsh::server::digest::Empty, ::org::kapa::tarracsh::server::digest::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Quit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::kapa::tarracsh::server::digest::Empty>* PublicDigest::Stub::AsyncQuitRaw(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQuitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PublicDigest::Stub::Check(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::DigestRequest& request, ::org::kapa::tarracsh::server::digest::DigestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::kapa::tarracsh::server::digest::DigestRequest, ::org::kapa::tarracsh::server::digest::DigestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Check_, context, request, response);
}

void PublicDigest::Stub::async::Check(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::DigestRequest* request, ::org::kapa::tarracsh::server::digest::DigestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::kapa::tarracsh::server::digest::DigestRequest, ::org::kapa::tarracsh::server::digest::DigestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void PublicDigest::Stub::async::Check(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::DigestRequest* request, ::org::kapa::tarracsh::server::digest::DigestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::kapa::tarracsh::server::digest::DigestResponse>* PublicDigest::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::DigestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::kapa::tarracsh::server::digest::DigestResponse, ::org::kapa::tarracsh::server::digest::DigestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Check_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::kapa::tarracsh::server::digest::DigestResponse>* PublicDigest::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::org::kapa::tarracsh::server::digest::DigestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

PublicDigest::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublicDigest_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PublicDigest::Service, ::org::kapa::tarracsh::server::digest::Point, ::org::kapa::tarracsh::server::digest::Feature, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PublicDigest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::kapa::tarracsh::server::digest::Point* req,
             ::org::kapa::tarracsh::server::digest::Feature* resp) {
               return service->GetFeature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublicDigest_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PublicDigest::Service, ::org::kapa::tarracsh::server::digest::Rectangle, ::org::kapa::tarracsh::server::digest::Feature>(
          [](PublicDigest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::kapa::tarracsh::server::digest::Rectangle* req,
             ::grpc::ServerWriter<::org::kapa::tarracsh::server::digest::Feature>* writer) {
               return service->ListFeatures(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublicDigest_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< PublicDigest::Service, ::org::kapa::tarracsh::server::digest::Point, ::org::kapa::tarracsh::server::digest::RouteSummary>(
          [](PublicDigest::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::org::kapa::tarracsh::server::digest::Point>* reader,
             ::org::kapa::tarracsh::server::digest::RouteSummary* resp) {
               return service->RecordRoute(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublicDigest_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PublicDigest::Service, ::org::kapa::tarracsh::server::digest::RouteNote, ::org::kapa::tarracsh::server::digest::RouteNote>(
          [](PublicDigest::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::org::kapa::tarracsh::server::digest::RouteNote,
             ::org::kapa::tarracsh::server::digest::RouteNote>* stream) {
               return service->RouteChat(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublicDigest_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PublicDigest::Service, ::org::kapa::tarracsh::server::digest::Empty, ::org::kapa::tarracsh::server::digest::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PublicDigest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::kapa::tarracsh::server::digest::Empty* req,
             ::org::kapa::tarracsh::server::digest::Empty* resp) {
               return service->Quit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublicDigest_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PublicDigest::Service, ::org::kapa::tarracsh::server::digest::DigestRequest, ::org::kapa::tarracsh::server::digest::DigestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PublicDigest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::kapa::tarracsh::server::digest::DigestRequest* req,
             ::org::kapa::tarracsh::server::digest::DigestResponse* resp) {
               return service->Check(ctx, req, resp);
             }, this)));
}

PublicDigest::Service::~Service() {
}

::grpc::Status PublicDigest::Service::GetFeature(::grpc::ServerContext* context, const ::org::kapa::tarracsh::server::digest::Point* request, ::org::kapa::tarracsh::server::digest::Feature* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PublicDigest::Service::ListFeatures(::grpc::ServerContext* context, const ::org::kapa::tarracsh::server::digest::Rectangle* request, ::grpc::ServerWriter< ::org::kapa::tarracsh::server::digest::Feature>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PublicDigest::Service::RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::org::kapa::tarracsh::server::digest::Point>* reader, ::org::kapa::tarracsh::server::digest::RouteSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PublicDigest::Service::RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::org::kapa::tarracsh::server::digest::RouteNote, ::org::kapa::tarracsh::server::digest::RouteNote>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PublicDigest::Service::Quit(::grpc::ServerContext* context, const ::org::kapa::tarracsh::server::digest::Empty* request, ::org::kapa::tarracsh::server::digest::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PublicDigest::Service::Check(::grpc::ServerContext* context, const ::org::kapa::tarracsh::server::digest::DigestRequest* request, ::org::kapa::tarracsh::server::digest::DigestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace org
}  // namespace kapa
}  // namespace tarracsh
}  // namespace server
}  // namespace digest

