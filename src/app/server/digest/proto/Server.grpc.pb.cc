// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Server.proto

#include "Server.pb.h"
#include "Server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace kapa {
namespace tarracsh {
namespace app {
namespace server {
namespace digest {

static const char* PublicDigest_method_names[] = {
  "/kapa.tarracsh.app.server.digest.PublicDigest/Quit",
  "/kapa.tarracsh.app.server.digest.PublicDigest/Check",
};

std::unique_ptr< PublicDigest::Stub> PublicDigest::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PublicDigest::Stub> stub(new PublicDigest::Stub(channel, options));
  return stub;
}

PublicDigest::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Quit_(PublicDigest_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Check_(PublicDigest_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PublicDigest::Stub::Quit(::grpc::ClientContext* context, const ::kapa::tarracsh::app::server::digest::Empty& request, ::kapa::tarracsh::app::server::digest::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kapa::tarracsh::app::server::digest::Empty, ::kapa::tarracsh::app::server::digest::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Quit_, context, request, response);
}

void PublicDigest::Stub::async::Quit(::grpc::ClientContext* context, const ::kapa::tarracsh::app::server::digest::Empty* request, ::kapa::tarracsh::app::server::digest::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kapa::tarracsh::app::server::digest::Empty, ::kapa::tarracsh::app::server::digest::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Quit_, context, request, response, std::move(f));
}

void PublicDigest::Stub::async::Quit(::grpc::ClientContext* context, const ::kapa::tarracsh::app::server::digest::Empty* request, ::kapa::tarracsh::app::server::digest::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Quit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kapa::tarracsh::app::server::digest::Empty>* PublicDigest::Stub::PrepareAsyncQuitRaw(::grpc::ClientContext* context, const ::kapa::tarracsh::app::server::digest::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kapa::tarracsh::app::server::digest::Empty, ::kapa::tarracsh::app::server::digest::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Quit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kapa::tarracsh::app::server::digest::Empty>* PublicDigest::Stub::AsyncQuitRaw(::grpc::ClientContext* context, const ::kapa::tarracsh::app::server::digest::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQuitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PublicDigest::Stub::Check(::grpc::ClientContext* context, const ::kapa::tarracsh::app::server::digest::DigestRequest& request, ::kapa::tarracsh::app::server::digest::DigestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kapa::tarracsh::app::server::digest::DigestRequest, ::kapa::tarracsh::app::server::digest::DigestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Check_, context, request, response);
}

void PublicDigest::Stub::async::Check(::grpc::ClientContext* context, const ::kapa::tarracsh::app::server::digest::DigestRequest* request, ::kapa::tarracsh::app::server::digest::DigestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kapa::tarracsh::app::server::digest::DigestRequest, ::kapa::tarracsh::app::server::digest::DigestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void PublicDigest::Stub::async::Check(::grpc::ClientContext* context, const ::kapa::tarracsh::app::server::digest::DigestRequest* request, ::kapa::tarracsh::app::server::digest::DigestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kapa::tarracsh::app::server::digest::DigestResponse>* PublicDigest::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::kapa::tarracsh::app::server::digest::DigestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kapa::tarracsh::app::server::digest::DigestResponse, ::kapa::tarracsh::app::server::digest::DigestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Check_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kapa::tarracsh::app::server::digest::DigestResponse>* PublicDigest::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::kapa::tarracsh::app::server::digest::DigestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

PublicDigest::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublicDigest_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PublicDigest::Service, ::kapa::tarracsh::app::server::digest::Empty, ::kapa::tarracsh::app::server::digest::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PublicDigest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kapa::tarracsh::app::server::digest::Empty* req,
             ::kapa::tarracsh::app::server::digest::Empty* resp) {
               return service->Quit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublicDigest_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PublicDigest::Service, ::kapa::tarracsh::app::server::digest::DigestRequest, ::kapa::tarracsh::app::server::digest::DigestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PublicDigest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kapa::tarracsh::app::server::digest::DigestRequest* req,
             ::kapa::tarracsh::app::server::digest::DigestResponse* resp) {
               return service->Check(ctx, req, resp);
             }, this)));
}

PublicDigest::Service::~Service() {
}

::grpc::Status PublicDigest::Service::Quit(::grpc::ServerContext* context, const ::kapa::tarracsh::app::server::digest::Empty* request, ::kapa::tarracsh::app::server::digest::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PublicDigest::Service::Check(::grpc::ServerContext* context, const ::kapa::tarracsh::app::server::digest::DigestRequest* request, ::kapa::tarracsh::app::server::digest::DigestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kapa
}  // namespace tarracsh
}  // namespace app
}  // namespace server
}  // namespace digest

