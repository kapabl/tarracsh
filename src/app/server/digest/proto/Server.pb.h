// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Server_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Server_2eproto;
namespace kapa {
namespace tarracsh {
namespace server {
namespace digest {
class DigestRequest;
struct DigestRequestDefaultTypeInternal;
extern DigestRequestDefaultTypeInternal _DigestRequest_default_instance_;
class DigestResponse;
struct DigestResponseDefaultTypeInternal;
extern DigestResponseDefaultTypeInternal _DigestResponse_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FileDigestResult;
struct FileDigestResultDefaultTypeInternal;
extern FileDigestResultDefaultTypeInternal _FileDigestResult_default_instance_;
}  // namespace digest
}  // namespace server
}  // namespace tarracsh
}  // namespace kapa
PROTOBUF_NAMESPACE_OPEN
template<> ::kapa::tarracsh::server::digest::DigestRequest* Arena::CreateMaybeMessage<::kapa::tarracsh::server::digest::DigestRequest>(Arena*);
template<> ::kapa::tarracsh::server::digest::DigestResponse* Arena::CreateMaybeMessage<::kapa::tarracsh::server::digest::DigestResponse>(Arena*);
template<> ::kapa::tarracsh::server::digest::Empty* Arena::CreateMaybeMessage<::kapa::tarracsh::server::digest::Empty>(Arena*);
template<> ::kapa::tarracsh::server::digest::FileDigestResult* Arena::CreateMaybeMessage<::kapa::tarracsh::server::digest::FileDigestResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kapa {
namespace tarracsh {
namespace server {
namespace digest {

// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:kapa.tarracsh.server.digest.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kapa.tarracsh.server.digest.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kapa.tarracsh.server.digest.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class DigestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kapa.tarracsh.server.digest.DigestRequest) */ {
 public:
  inline DigestRequest() : DigestRequest(nullptr) {}
  ~DigestRequest() override;
  explicit PROTOBUF_CONSTEXPR DigestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigestRequest(const DigestRequest& from);
  DigestRequest(DigestRequest&& from) noexcept
    : DigestRequest() {
    *this = ::std::move(from);
  }

  inline DigestRequest& operator=(const DigestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigestRequest& operator=(DigestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigestRequest* internal_default_instance() {
    return reinterpret_cast<const DigestRequest*>(
               &_DigestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DigestRequest& a, DigestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DigestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DigestRequest& from) {
    DigestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kapa.tarracsh.server.digest.DigestRequest";
  }
  protected:
  explicit DigestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kDryRunFieldNumber = 2,
  };
  // string input = 1;
  void clear_input();
  const std::string& input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // bool dryRun = 2;
  void clear_dryrun();
  bool dryrun() const;
  void set_dryrun(bool value);
  private:
  bool _internal_dryrun() const;
  void _internal_set_dryrun(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kapa.tarracsh.server.digest.DigestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
    bool dryrun_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class FileDigestResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kapa.tarracsh.server.digest.FileDigestResult) */ {
 public:
  inline FileDigestResult() : FileDigestResult(nullptr) {}
  ~FileDigestResult() override;
  explicit PROTOBUF_CONSTEXPR FileDigestResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDigestResult(const FileDigestResult& from);
  FileDigestResult(FileDigestResult&& from) noexcept
    : FileDigestResult() {
    *this = ::std::move(from);
  }

  inline FileDigestResult& operator=(const FileDigestResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDigestResult& operator=(FileDigestResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDigestResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDigestResult* internal_default_instance() {
    return reinterpret_cast<const FileDigestResult*>(
               &_FileDigestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileDigestResult& a, FileDigestResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDigestResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDigestResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDigestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDigestResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDigestResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileDigestResult& from) {
    FileDigestResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDigestResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kapa.tarracsh.server.digest.FileDigestResult";
  }
  protected:
  explicit FileDigestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kIsNewFieldNumber = 2,
    kIsChangedFieldNumber = 3,
    kIsSameDigestFieldNumber = 4,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bool isNew = 2;
  void clear_isnew();
  bool isnew() const;
  void set_isnew(bool value);
  private:
  bool _internal_isnew() const;
  void _internal_set_isnew(bool value);
  public:

  // bool isChanged = 3;
  void clear_ischanged();
  bool ischanged() const;
  void set_ischanged(bool value);
  private:
  bool _internal_ischanged() const;
  void _internal_set_ischanged(bool value);
  public:

  // bool isSameDigest = 4;
  void clear_issamedigest();
  bool issamedigest() const;
  void set_issamedigest(bool value);
  private:
  bool _internal_issamedigest() const;
  void _internal_set_issamedigest(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kapa.tarracsh.server.digest.FileDigestResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    bool isnew_;
    bool ischanged_;
    bool issamedigest_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class DigestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kapa.tarracsh.server.digest.DigestResponse) */ {
 public:
  inline DigestResponse() : DigestResponse(nullptr) {}
  ~DigestResponse() override;
  explicit PROTOBUF_CONSTEXPR DigestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigestResponse(const DigestResponse& from);
  DigestResponse(DigestResponse&& from) noexcept
    : DigestResponse() {
    *this = ::std::move(from);
  }

  inline DigestResponse& operator=(const DigestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigestResponse& operator=(DigestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigestResponse* internal_default_instance() {
    return reinterpret_cast<const DigestResponse*>(
               &_DigestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DigestResponse& a, DigestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DigestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DigestResponse& from) {
    DigestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kapa.tarracsh.server.digest.DigestResponse";
  }
  protected:
  explicit DigestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJarsFieldNumber = 1,
    kClassfilesFieldNumber = 2,
  };
  // repeated .kapa.tarracsh.server.digest.FileDigestResult jars = 1;
  int jars_size() const;
  private:
  int _internal_jars_size() const;
  public:
  void clear_jars();
  ::kapa::tarracsh::server::digest::FileDigestResult* mutable_jars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kapa::tarracsh::server::digest::FileDigestResult >*
      mutable_jars();
  private:
  const ::kapa::tarracsh::server::digest::FileDigestResult& _internal_jars(int index) const;
  ::kapa::tarracsh::server::digest::FileDigestResult* _internal_add_jars();
  public:
  const ::kapa::tarracsh::server::digest::FileDigestResult& jars(int index) const;
  ::kapa::tarracsh::server::digest::FileDigestResult* add_jars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kapa::tarracsh::server::digest::FileDigestResult >&
      jars() const;

  // repeated .kapa.tarracsh.server.digest.FileDigestResult classfiles = 2;
  int classfiles_size() const;
  private:
  int _internal_classfiles_size() const;
  public:
  void clear_classfiles();
  ::kapa::tarracsh::server::digest::FileDigestResult* mutable_classfiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kapa::tarracsh::server::digest::FileDigestResult >*
      mutable_classfiles();
  private:
  const ::kapa::tarracsh::server::digest::FileDigestResult& _internal_classfiles(int index) const;
  ::kapa::tarracsh::server::digest::FileDigestResult* _internal_add_classfiles();
  public:
  const ::kapa::tarracsh::server::digest::FileDigestResult& classfiles(int index) const;
  ::kapa::tarracsh::server::digest::FileDigestResult* add_classfiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kapa::tarracsh::server::digest::FileDigestResult >&
      classfiles() const;

  // @@protoc_insertion_point(class_scope:kapa.tarracsh.server.digest.DigestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kapa::tarracsh::server::digest::FileDigestResult > jars_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kapa::tarracsh::server::digest::FileDigestResult > classfiles_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Server_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// DigestRequest

// string input = 1;
inline void DigestRequest::clear_input() {
  _impl_.input_.ClearToEmpty();
}
inline const std::string& DigestRequest::input() const {
  // @@protoc_insertion_point(field_get:kapa.tarracsh.server.digest.DigestRequest.input)
  return _internal_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DigestRequest::set_input(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kapa.tarracsh.server.digest.DigestRequest.input)
}
inline std::string* DigestRequest::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:kapa.tarracsh.server.digest.DigestRequest.input)
  return _s;
}
inline const std::string& DigestRequest::_internal_input() const {
  return _impl_.input_.Get();
}
inline void DigestRequest::_internal_set_input(const std::string& value) {
  
  _impl_.input_.Set(value, GetArenaForAllocation());
}
inline std::string* DigestRequest::_internal_mutable_input() {
  
  return _impl_.input_.Mutable(GetArenaForAllocation());
}
inline std::string* DigestRequest::release_input() {
  // @@protoc_insertion_point(field_release:kapa.tarracsh.server.digest.DigestRequest.input)
  return _impl_.input_.Release();
}
inline void DigestRequest::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  _impl_.input_.SetAllocated(input, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_.IsDefault()) {
    _impl_.input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kapa.tarracsh.server.digest.DigestRequest.input)
}

// bool dryRun = 2;
inline void DigestRequest::clear_dryrun() {
  _impl_.dryrun_ = false;
}
inline bool DigestRequest::_internal_dryrun() const {
  return _impl_.dryrun_;
}
inline bool DigestRequest::dryrun() const {
  // @@protoc_insertion_point(field_get:kapa.tarracsh.server.digest.DigestRequest.dryRun)
  return _internal_dryrun();
}
inline void DigestRequest::_internal_set_dryrun(bool value) {
  
  _impl_.dryrun_ = value;
}
inline void DigestRequest::set_dryrun(bool value) {
  _internal_set_dryrun(value);
  // @@protoc_insertion_point(field_set:kapa.tarracsh.server.digest.DigestRequest.dryRun)
}

// -------------------------------------------------------------------

// FileDigestResult

// string filename = 1;
inline void FileDigestResult::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileDigestResult::filename() const {
  // @@protoc_insertion_point(field_get:kapa.tarracsh.server.digest.FileDigestResult.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDigestResult::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kapa.tarracsh.server.digest.FileDigestResult.filename)
}
inline std::string* FileDigestResult::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:kapa.tarracsh.server.digest.FileDigestResult.filename)
  return _s;
}
inline const std::string& FileDigestResult::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void FileDigestResult::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDigestResult::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* FileDigestResult::release_filename() {
  // @@protoc_insertion_point(field_release:kapa.tarracsh.server.digest.FileDigestResult.filename)
  return _impl_.filename_.Release();
}
inline void FileDigestResult::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kapa.tarracsh.server.digest.FileDigestResult.filename)
}

// bool isNew = 2;
inline void FileDigestResult::clear_isnew() {
  _impl_.isnew_ = false;
}
inline bool FileDigestResult::_internal_isnew() const {
  return _impl_.isnew_;
}
inline bool FileDigestResult::isnew() const {
  // @@protoc_insertion_point(field_get:kapa.tarracsh.server.digest.FileDigestResult.isNew)
  return _internal_isnew();
}
inline void FileDigestResult::_internal_set_isnew(bool value) {
  
  _impl_.isnew_ = value;
}
inline void FileDigestResult::set_isnew(bool value) {
  _internal_set_isnew(value);
  // @@protoc_insertion_point(field_set:kapa.tarracsh.server.digest.FileDigestResult.isNew)
}

// bool isChanged = 3;
inline void FileDigestResult::clear_ischanged() {
  _impl_.ischanged_ = false;
}
inline bool FileDigestResult::_internal_ischanged() const {
  return _impl_.ischanged_;
}
inline bool FileDigestResult::ischanged() const {
  // @@protoc_insertion_point(field_get:kapa.tarracsh.server.digest.FileDigestResult.isChanged)
  return _internal_ischanged();
}
inline void FileDigestResult::_internal_set_ischanged(bool value) {
  
  _impl_.ischanged_ = value;
}
inline void FileDigestResult::set_ischanged(bool value) {
  _internal_set_ischanged(value);
  // @@protoc_insertion_point(field_set:kapa.tarracsh.server.digest.FileDigestResult.isChanged)
}

// bool isSameDigest = 4;
inline void FileDigestResult::clear_issamedigest() {
  _impl_.issamedigest_ = false;
}
inline bool FileDigestResult::_internal_issamedigest() const {
  return _impl_.issamedigest_;
}
inline bool FileDigestResult::issamedigest() const {
  // @@protoc_insertion_point(field_get:kapa.tarracsh.server.digest.FileDigestResult.isSameDigest)
  return _internal_issamedigest();
}
inline void FileDigestResult::_internal_set_issamedigest(bool value) {
  
  _impl_.issamedigest_ = value;
}
inline void FileDigestResult::set_issamedigest(bool value) {
  _internal_set_issamedigest(value);
  // @@protoc_insertion_point(field_set:kapa.tarracsh.server.digest.FileDigestResult.isSameDigest)
}

// -------------------------------------------------------------------

// DigestResponse

// repeated .kapa.tarracsh.server.digest.FileDigestResult jars = 1;
inline int DigestResponse::_internal_jars_size() const {
  return _impl_.jars_.size();
}
inline int DigestResponse::jars_size() const {
  return _internal_jars_size();
}
inline void DigestResponse::clear_jars() {
  _impl_.jars_.Clear();
}
inline ::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::mutable_jars(int index) {
  // @@protoc_insertion_point(field_mutable:kapa.tarracsh.server.digest.DigestResponse.jars)
  return _impl_.jars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kapa::tarracsh::server::digest::FileDigestResult >*
DigestResponse::mutable_jars() {
  // @@protoc_insertion_point(field_mutable_list:kapa.tarracsh.server.digest.DigestResponse.jars)
  return &_impl_.jars_;
}
inline const ::kapa::tarracsh::server::digest::FileDigestResult& DigestResponse::_internal_jars(int index) const {
  return _impl_.jars_.Get(index);
}
inline const ::kapa::tarracsh::server::digest::FileDigestResult& DigestResponse::jars(int index) const {
  // @@protoc_insertion_point(field_get:kapa.tarracsh.server.digest.DigestResponse.jars)
  return _internal_jars(index);
}
inline ::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::_internal_add_jars() {
  return _impl_.jars_.Add();
}
inline ::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::add_jars() {
  ::kapa::tarracsh::server::digest::FileDigestResult* _add = _internal_add_jars();
  // @@protoc_insertion_point(field_add:kapa.tarracsh.server.digest.DigestResponse.jars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kapa::tarracsh::server::digest::FileDigestResult >&
DigestResponse::jars() const {
  // @@protoc_insertion_point(field_list:kapa.tarracsh.server.digest.DigestResponse.jars)
  return _impl_.jars_;
}

// repeated .kapa.tarracsh.server.digest.FileDigestResult classfiles = 2;
inline int DigestResponse::_internal_classfiles_size() const {
  return _impl_.classfiles_.size();
}
inline int DigestResponse::classfiles_size() const {
  return _internal_classfiles_size();
}
inline void DigestResponse::clear_classfiles() {
  _impl_.classfiles_.Clear();
}
inline ::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::mutable_classfiles(int index) {
  // @@protoc_insertion_point(field_mutable:kapa.tarracsh.server.digest.DigestResponse.classfiles)
  return _impl_.classfiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kapa::tarracsh::server::digest::FileDigestResult >*
DigestResponse::mutable_classfiles() {
  // @@protoc_insertion_point(field_mutable_list:kapa.tarracsh.server.digest.DigestResponse.classfiles)
  return &_impl_.classfiles_;
}
inline const ::kapa::tarracsh::server::digest::FileDigestResult& DigestResponse::_internal_classfiles(int index) const {
  return _impl_.classfiles_.Get(index);
}
inline const ::kapa::tarracsh::server::digest::FileDigestResult& DigestResponse::classfiles(int index) const {
  // @@protoc_insertion_point(field_get:kapa.tarracsh.server.digest.DigestResponse.classfiles)
  return _internal_classfiles(index);
}
inline ::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::_internal_add_classfiles() {
  return _impl_.classfiles_.Add();
}
inline ::kapa::tarracsh::server::digest::FileDigestResult* DigestResponse::add_classfiles() {
  ::kapa::tarracsh::server::digest::FileDigestResult* _add = _internal_add_classfiles();
  // @@protoc_insertion_point(field_add:kapa.tarracsh.server.digest.DigestResponse.classfiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kapa::tarracsh::server::digest::FileDigestResult >&
DigestResponse::classfiles() const {
  // @@protoc_insertion_point(field_list:kapa.tarracsh.server.digest.DigestResponse.classfiles)
  return _impl_.classfiles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace digest
}  // namespace server
}  // namespace tarracsh
}  // namespace kapa

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Server_2eproto
