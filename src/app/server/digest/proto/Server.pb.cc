// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto

#include "Server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kapa {
namespace tarracsh {
namespace app {
namespace server {
namespace digest {
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
PROTOBUF_CONSTEXPR DiffRequest::DiffRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dryrun_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DiffRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiffRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiffRequestDefaultTypeInternal() {}
  union {
    DiffRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiffRequestDefaultTypeInternal _DiffRequest_default_instance_;
PROTOBUF_CONSTEXPR FileDigestResult::FileDigestResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isnew_)*/false
  , /*decltype(_impl_.ismodified_)*/false
  , /*decltype(_impl_.issamedigest_)*/false
  , /*decltype(_impl_.failed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileDigestResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDigestResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDigestResultDefaultTypeInternal() {}
  union {
    FileDigestResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDigestResultDefaultTypeInternal _FileDigestResult_default_instance_;
PROTOBUF_CONSTEXPR ClassDigestResult::ClassDigestResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.strongclassname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isnew_)*/false
  , /*decltype(_impl_.ismodified_)*/false
  , /*decltype(_impl_.issamedigest_)*/false
  , /*decltype(_impl_.failed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClassDigestResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassDigestResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassDigestResultDefaultTypeInternal() {}
  union {
    ClassDigestResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassDigestResultDefaultTypeInternal _ClassDigestResult_default_instance_;
PROTOBUF_CONSTEXPR DiffResponse::DiffResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.classfiles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DiffResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiffResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiffResponseDefaultTypeInternal() {}
  union {
    DiffResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiffResponseDefaultTypeInternal _DiffResponse_default_instance_;
}  // namespace digest
}  // namespace server
}  // namespace app
}  // namespace tarracsh
}  // namespace kapa
static ::_pb::Metadata file_level_metadata_Server_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Server_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Server_2eproto = nullptr;

const uint32_t TableStruct_Server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::DiffRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::DiffRequest, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::DiffRequest, _impl_.dryrun_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::FileDigestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::FileDigestResult, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::FileDigestResult, _impl_.isnew_),
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::FileDigestResult, _impl_.ismodified_),
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::FileDigestResult, _impl_.issamedigest_),
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::FileDigestResult, _impl_.failed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::ClassDigestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::ClassDigestResult, _impl_.strongclassname_),
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::ClassDigestResult, _impl_.isnew_),
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::ClassDigestResult, _impl_.ismodified_),
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::ClassDigestResult, _impl_.issamedigest_),
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::ClassDigestResult, _impl_.failed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::DiffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::DiffResponse, _impl_.files_),
  PROTOBUF_FIELD_OFFSET(::kapa::tarracsh::app::server::digest::DiffResponse, _impl_.classfiles_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kapa::tarracsh::app::server::digest::Empty)},
  { 6, -1, -1, sizeof(::kapa::tarracsh::app::server::digest::DiffRequest)},
  { 14, -1, -1, sizeof(::kapa::tarracsh::app::server::digest::FileDigestResult)},
  { 25, -1, -1, sizeof(::kapa::tarracsh::app::server::digest::ClassDigestResult)},
  { 36, -1, -1, sizeof(::kapa::tarracsh::app::server::digest::DiffResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kapa::tarracsh::app::server::digest::_Empty_default_instance_._instance,
  &::kapa::tarracsh::app::server::digest::_DiffRequest_default_instance_._instance,
  &::kapa::tarracsh::app::server::digest::_FileDigestResult_default_instance_._instance,
  &::kapa::tarracsh::app::server::digest::_ClassDigestResult_default_instance_._instance,
  &::kapa::tarracsh::app::server::digest::_DiffResponse_default_instance_._instance,
};

const char descriptor_table_protodef_Server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Server.proto\022\037kapa.tarracsh.app.server"
  ".digest\"\007\n\005Empty\",\n\013DiffRequest\022\r\n\005input"
  "\030\001 \001(\t\022\016\n\006dryRun\030\002 \001(\010\"m\n\020FileDigestResu"
  "lt\022\020\n\010filename\030\001 \001(\t\022\r\n\005isNew\030\002 \001(\010\022\022\n\ni"
  "sModified\030\003 \001(\010\022\024\n\014isSameDigest\030\004 \001(\010\022\016\n"
  "\006failed\030\005 \001(\010\"u\n\021ClassDigestResult\022\027\n\017st"
  "rongClassname\030\001 \001(\t\022\r\n\005isNew\030\002 \001(\010\022\022\n\nis"
  "Modified\030\003 \001(\010\022\024\n\014isSameDigest\030\004 \001(\010\022\016\n\006"
  "failed\030\005 \001(\010\"\230\001\n\014DiffResponse\022@\n\005files\030\001"
  " \003(\01321.kapa.tarracsh.app.server.digest.F"
  "ileDigestResult\022F\n\nclassfiles\030\002 \003(\01322.ka"
  "pa.tarracsh.app.server.digest.ClassDiges"
  "tResult2\317\001\n\014PublicDigest\022X\n\004Quit\022&.kapa."
  "tarracsh.app.server.digest.Empty\032&.kapa."
  "tarracsh.app.server.digest.Empty\"\000\022e\n\004Di"
  "ff\022,.kapa.tarracsh.app.server.digest.Dif"
  "fRequest\032-.kapa.tarracsh.app.server.dige"
  "st.DiffResponse\"\000B6\n\033io.grpc.examples.ro"
  "uteguideB\017RouteGuideProtoP\001\242\002\003RTGb\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_Server_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Server_2eproto = {
    false, false, 761, descriptor_table_protodef_Server_2eproto,
    "Server.proto",
    &descriptor_table_Server_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_Server_2eproto::offsets,
    file_level_metadata_Server_2eproto, file_level_enum_descriptors_Server_2eproto,
    file_level_service_descriptors_Server_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Server_2eproto_getter() {
  return &descriptor_table_Server_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Server_2eproto(&descriptor_table_Server_2eproto);
namespace kapa {
namespace tarracsh {
namespace app {
namespace server {
namespace digest {

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kapa.tarracsh.app.server.digest.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kapa.tarracsh.app.server.digest.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[0]);
}

// ===================================================================

class DiffRequest::_Internal {
 public:
};

DiffRequest::DiffRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kapa.tarracsh.app.server.digest.DiffRequest)
}
DiffRequest::DiffRequest(const DiffRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DiffRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){}
    , decltype(_impl_.dryrun_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input().empty()) {
    _this->_impl_.input_.Set(from._internal_input(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.dryrun_ = from._impl_.dryrun_;
  // @@protoc_insertion_point(copy_constructor:kapa.tarracsh.app.server.digest.DiffRequest)
}

inline void DiffRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){}
    , decltype(_impl_.dryrun_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DiffRequest::~DiffRequest() {
  // @@protoc_insertion_point(destructor:kapa.tarracsh.app.server.digest.DiffRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiffRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_.Destroy();
}

void DiffRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DiffRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kapa.tarracsh.app.server.digest.DiffRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_.ClearToEmpty();
  _impl_.dryrun_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiffRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_input();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kapa.tarracsh.app.server.digest.DiffRequest.input"));
        } else
          goto handle_unusual;
        continue;
      // bool dryRun = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dryrun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiffRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kapa.tarracsh.app.server.digest.DiffRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string input = 1;
  if (!this->_internal_input().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input().data(), static_cast<int>(this->_internal_input().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kapa.tarracsh.app.server.digest.DiffRequest.input");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_input(), target);
  }

  // bool dryRun = 2;
  if (this->_internal_dryrun() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_dryrun(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kapa.tarracsh.app.server.digest.DiffRequest)
  return target;
}

size_t DiffRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kapa.tarracsh.app.server.digest.DiffRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input = 1;
  if (!this->_internal_input().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input());
  }

  // bool dryRun = 2;
  if (this->_internal_dryrun() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiffRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DiffRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiffRequest::GetClassData() const { return &_class_data_; }


void DiffRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DiffRequest*>(&to_msg);
  auto& from = static_cast<const DiffRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kapa.tarracsh.app.server.digest.DiffRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input().empty()) {
    _this->_internal_set_input(from._internal_input());
  }
  if (from._internal_dryrun() != 0) {
    _this->_internal_set_dryrun(from._internal_dryrun());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiffRequest::CopyFrom(const DiffRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kapa.tarracsh.app.server.digest.DiffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiffRequest::IsInitialized() const {
  return true;
}

void DiffRequest::InternalSwap(DiffRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_, lhs_arena,
      &other->_impl_.input_, rhs_arena
  );
  swap(_impl_.dryrun_, other->_impl_.dryrun_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiffRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[1]);
}

// ===================================================================

class FileDigestResult::_Internal {
 public:
};

FileDigestResult::FileDigestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kapa.tarracsh.app.server.digest.FileDigestResult)
}
FileDigestResult::FileDigestResult(const FileDigestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileDigestResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.isnew_){}
    , decltype(_impl_.ismodified_){}
    , decltype(_impl_.issamedigest_){}
    , decltype(_impl_.failed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.isnew_, &from._impl_.isnew_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.failed_) -
    reinterpret_cast<char*>(&_impl_.isnew_)) + sizeof(_impl_.failed_));
  // @@protoc_insertion_point(copy_constructor:kapa.tarracsh.app.server.digest.FileDigestResult)
}

inline void FileDigestResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.isnew_){false}
    , decltype(_impl_.ismodified_){false}
    , decltype(_impl_.issamedigest_){false}
    , decltype(_impl_.failed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileDigestResult::~FileDigestResult() {
  // @@protoc_insertion_point(destructor:kapa.tarracsh.app.server.digest.FileDigestResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileDigestResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
}

void FileDigestResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileDigestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:kapa.tarracsh.app.server.digest.FileDigestResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  ::memset(&_impl_.isnew_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.failed_) -
      reinterpret_cast<char*>(&_impl_.isnew_)) + sizeof(_impl_.failed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileDigestResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kapa.tarracsh.app.server.digest.FileDigestResult.filename"));
        } else
          goto handle_unusual;
        continue;
      // bool isNew = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isnew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isModified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ismodified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSameDigest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.issamedigest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool failed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileDigestResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kapa.tarracsh.app.server.digest.FileDigestResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kapa.tarracsh.app.server.digest.FileDigestResult.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // bool isNew = 2;
  if (this->_internal_isnew() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isnew(), target);
  }

  // bool isModified = 3;
  if (this->_internal_ismodified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ismodified(), target);
  }

  // bool isSameDigest = 4;
  if (this->_internal_issamedigest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_issamedigest(), target);
  }

  // bool failed = 5;
  if (this->_internal_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_failed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kapa.tarracsh.app.server.digest.FileDigestResult)
  return target;
}

size_t FileDigestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kapa.tarracsh.app.server.digest.FileDigestResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // bool isNew = 2;
  if (this->_internal_isnew() != 0) {
    total_size += 1 + 1;
  }

  // bool isModified = 3;
  if (this->_internal_ismodified() != 0) {
    total_size += 1 + 1;
  }

  // bool isSameDigest = 4;
  if (this->_internal_issamedigest() != 0) {
    total_size += 1 + 1;
  }

  // bool failed = 5;
  if (this->_internal_failed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileDigestResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileDigestResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileDigestResult::GetClassData() const { return &_class_data_; }


void FileDigestResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileDigestResult*>(&to_msg);
  auto& from = static_cast<const FileDigestResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kapa.tarracsh.app.server.digest.FileDigestResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (from._internal_isnew() != 0) {
    _this->_internal_set_isnew(from._internal_isnew());
  }
  if (from._internal_ismodified() != 0) {
    _this->_internal_set_ismodified(from._internal_ismodified());
  }
  if (from._internal_issamedigest() != 0) {
    _this->_internal_set_issamedigest(from._internal_issamedigest());
  }
  if (from._internal_failed() != 0) {
    _this->_internal_set_failed(from._internal_failed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileDigestResult::CopyFrom(const FileDigestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kapa.tarracsh.app.server.digest.FileDigestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDigestResult::IsInitialized() const {
  return true;
}

void FileDigestResult::InternalSwap(FileDigestResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileDigestResult, _impl_.failed_)
      + sizeof(FileDigestResult::_impl_.failed_)
      - PROTOBUF_FIELD_OFFSET(FileDigestResult, _impl_.isnew_)>(
          reinterpret_cast<char*>(&_impl_.isnew_),
          reinterpret_cast<char*>(&other->_impl_.isnew_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileDigestResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[2]);
}

// ===================================================================

class ClassDigestResult::_Internal {
 public:
};

ClassDigestResult::ClassDigestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kapa.tarracsh.app.server.digest.ClassDigestResult)
}
ClassDigestResult::ClassDigestResult(const ClassDigestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClassDigestResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.strongclassname_){}
    , decltype(_impl_.isnew_){}
    , decltype(_impl_.ismodified_){}
    , decltype(_impl_.issamedigest_){}
    , decltype(_impl_.failed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.strongclassname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strongclassname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strongclassname().empty()) {
    _this->_impl_.strongclassname_.Set(from._internal_strongclassname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.isnew_, &from._impl_.isnew_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.failed_) -
    reinterpret_cast<char*>(&_impl_.isnew_)) + sizeof(_impl_.failed_));
  // @@protoc_insertion_point(copy_constructor:kapa.tarracsh.app.server.digest.ClassDigestResult)
}

inline void ClassDigestResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.strongclassname_){}
    , decltype(_impl_.isnew_){false}
    , decltype(_impl_.ismodified_){false}
    , decltype(_impl_.issamedigest_){false}
    , decltype(_impl_.failed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.strongclassname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strongclassname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClassDigestResult::~ClassDigestResult() {
  // @@protoc_insertion_point(destructor:kapa.tarracsh.app.server.digest.ClassDigestResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassDigestResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strongclassname_.Destroy();
}

void ClassDigestResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassDigestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:kapa.tarracsh.app.server.digest.ClassDigestResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.strongclassname_.ClearToEmpty();
  ::memset(&_impl_.isnew_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.failed_) -
      reinterpret_cast<char*>(&_impl_.isnew_)) + sizeof(_impl_.failed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassDigestResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string strongClassname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strongclassname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kapa.tarracsh.app.server.digest.ClassDigestResult.strongClassname"));
        } else
          goto handle_unusual;
        continue;
      // bool isNew = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isnew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isModified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ismodified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSameDigest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.issamedigest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool failed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassDigestResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kapa.tarracsh.app.server.digest.ClassDigestResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string strongClassname = 1;
  if (!this->_internal_strongclassname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strongclassname().data(), static_cast<int>(this->_internal_strongclassname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kapa.tarracsh.app.server.digest.ClassDigestResult.strongClassname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strongclassname(), target);
  }

  // bool isNew = 2;
  if (this->_internal_isnew() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isnew(), target);
  }

  // bool isModified = 3;
  if (this->_internal_ismodified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ismodified(), target);
  }

  // bool isSameDigest = 4;
  if (this->_internal_issamedigest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_issamedigest(), target);
  }

  // bool failed = 5;
  if (this->_internal_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_failed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kapa.tarracsh.app.server.digest.ClassDigestResult)
  return target;
}

size_t ClassDigestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kapa.tarracsh.app.server.digest.ClassDigestResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strongClassname = 1;
  if (!this->_internal_strongclassname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strongclassname());
  }

  // bool isNew = 2;
  if (this->_internal_isnew() != 0) {
    total_size += 1 + 1;
  }

  // bool isModified = 3;
  if (this->_internal_ismodified() != 0) {
    total_size += 1 + 1;
  }

  // bool isSameDigest = 4;
  if (this->_internal_issamedigest() != 0) {
    total_size += 1 + 1;
  }

  // bool failed = 5;
  if (this->_internal_failed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassDigestResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClassDigestResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassDigestResult::GetClassData() const { return &_class_data_; }


void ClassDigestResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClassDigestResult*>(&to_msg);
  auto& from = static_cast<const ClassDigestResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kapa.tarracsh.app.server.digest.ClassDigestResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strongclassname().empty()) {
    _this->_internal_set_strongclassname(from._internal_strongclassname());
  }
  if (from._internal_isnew() != 0) {
    _this->_internal_set_isnew(from._internal_isnew());
  }
  if (from._internal_ismodified() != 0) {
    _this->_internal_set_ismodified(from._internal_ismodified());
  }
  if (from._internal_issamedigest() != 0) {
    _this->_internal_set_issamedigest(from._internal_issamedigest());
  }
  if (from._internal_failed() != 0) {
    _this->_internal_set_failed(from._internal_failed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassDigestResult::CopyFrom(const ClassDigestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kapa.tarracsh.app.server.digest.ClassDigestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassDigestResult::IsInitialized() const {
  return true;
}

void ClassDigestResult::InternalSwap(ClassDigestResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.strongclassname_, lhs_arena,
      &other->_impl_.strongclassname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClassDigestResult, _impl_.failed_)
      + sizeof(ClassDigestResult::_impl_.failed_)
      - PROTOBUF_FIELD_OFFSET(ClassDigestResult, _impl_.isnew_)>(
          reinterpret_cast<char*>(&_impl_.isnew_),
          reinterpret_cast<char*>(&other->_impl_.isnew_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassDigestResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[3]);
}

// ===================================================================

class DiffResponse::_Internal {
 public:
};

DiffResponse::DiffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kapa.tarracsh.app.server.digest.DiffResponse)
}
DiffResponse::DiffResponse(const DiffResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DiffResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.classfiles_){from._impl_.classfiles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kapa.tarracsh.app.server.digest.DiffResponse)
}

inline void DiffResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){arena}
    , decltype(_impl_.classfiles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DiffResponse::~DiffResponse() {
  // @@protoc_insertion_point(destructor:kapa.tarracsh.app.server.digest.DiffResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiffResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
  _impl_.classfiles_.~RepeatedPtrField();
}

void DiffResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DiffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kapa.tarracsh.app.server.digest.DiffResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  _impl_.classfiles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiffResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kapa.tarracsh.app.server.digest.FileDigestResult files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .kapa.tarracsh.app.server.digest.ClassDigestResult classfiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classfiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiffResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kapa.tarracsh.app.server.digest.DiffResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kapa.tarracsh.app.server.digest.FileDigestResult files = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .kapa.tarracsh.app.server.digest.ClassDigestResult classfiles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classfiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_classfiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kapa.tarracsh.app.server.digest.DiffResponse)
  return target;
}

size_t DiffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kapa.tarracsh.app.server.digest.DiffResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kapa.tarracsh.app.server.digest.FileDigestResult files = 1;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kapa.tarracsh.app.server.digest.ClassDigestResult classfiles = 2;
  total_size += 1UL * this->_internal_classfiles_size();
  for (const auto& msg : this->_impl_.classfiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiffResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DiffResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiffResponse::GetClassData() const { return &_class_data_; }


void DiffResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DiffResponse*>(&to_msg);
  auto& from = static_cast<const DiffResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kapa.tarracsh.app.server.digest.DiffResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  _this->_impl_.classfiles_.MergeFrom(from._impl_.classfiles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiffResponse::CopyFrom(const DiffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kapa.tarracsh.app.server.digest.DiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiffResponse::IsInitialized() const {
  return true;
}

void DiffResponse::InternalSwap(DiffResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  _impl_.classfiles_.InternalSwap(&other->_impl_.classfiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiffResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace digest
}  // namespace server
}  // namespace app
}  // namespace tarracsh
}  // namespace kapa
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kapa::tarracsh::app::server::digest::Empty*
Arena::CreateMaybeMessage< ::kapa::tarracsh::app::server::digest::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kapa::tarracsh::app::server::digest::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::kapa::tarracsh::app::server::digest::DiffRequest*
Arena::CreateMaybeMessage< ::kapa::tarracsh::app::server::digest::DiffRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kapa::tarracsh::app::server::digest::DiffRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kapa::tarracsh::app::server::digest::FileDigestResult*
Arena::CreateMaybeMessage< ::kapa::tarracsh::app::server::digest::FileDigestResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kapa::tarracsh::app::server::digest::FileDigestResult >(arena);
}
template<> PROTOBUF_NOINLINE ::kapa::tarracsh::app::server::digest::ClassDigestResult*
Arena::CreateMaybeMessage< ::kapa::tarracsh::app::server::digest::ClassDigestResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kapa::tarracsh::app::server::digest::ClassDigestResult >(arena);
}
template<> PROTOBUF_NOINLINE ::kapa::tarracsh::app::server::digest::DiffResponse*
Arena::CreateMaybeMessage< ::kapa::tarracsh::app::server::digest::DiffResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kapa::tarracsh::app::server::digest::DiffResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
